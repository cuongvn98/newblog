<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Hirosume blog</title>
    <link>https://cuongvn98.github.io/tags/docker/</link>
    <description>Recent content in docker on Hirosume blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vn-vi</language>
    <copyright>©2019 Notepadium.</copyright>
    <lastBuildDate>Mon, 25 Jan 2021 20:45:40 +0700</lastBuildDate>
    
        <atom:link href="https://cuongvn98.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerize node.js app</title>
      <link>https://cuongvn98.github.io/post/dockerize_node_app/</link>
      <pubDate>Mon, 25 Jan 2021 20:45:40 +0700</pubDate>
      
      <guid>https://cuongvn98.github.io/post/dockerize_node_app/</guid>
      <description>&lt;p&gt;Ở bài trước mình đã bàn qua về docker và cài đặt docker trên ubuntu . Suốt tuần qua mình cũng đắn đo xem nên viết gì ở tuần này
. Thú thật cũng có vài ý tưởng, cũng muốn viết 1 bài chuyên sâu. Nhưng suy nghĩ kĩ thì mình sẽ tiếp tục với 1 bài cơ bản về docker trước khi
viết gì đó cao siêu hơn. Tiếp tục với docker cơ bản thì hôm nay mình sẽ hướng dẫn đóng gói 1 image cho node.js application.&lt;/p&gt;
&lt;h3 id=&#34;chuẩn-bị-&#34;&gt;Chuẩn bị :&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker.&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;IDE hoặc text editor tuỳ thích .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nếu các bạn sử dụng linux , mac thì mình khuyên các bạn nên dùng &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;target=&#34;_blank&#34;&gt;nvm&lt;/a&gt; để dễ dàng quản lý node version.&lt;/p&gt;
&lt;h3 id=&#34;nodejs-app&#34;&gt;Node.js app&lt;/h3&gt;
&lt;p&gt;Về application thì chúng ta sẽ viết một web service đơn giản trong đó nó sẽ trả về thông tin của ip của client đang gửi request.&lt;/p&gt;
&lt;p&gt;Chúng ta sẽ bắt đầu như sau :&lt;/p&gt;
&lt;p&gt;Đầu tiên chúng ta khởi tạo project với chuỗi lệnh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir dockerize_node_app &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;
npm init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Và cài đặt express.js như là dependency :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm i express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sau khi chuẩn bị khởi tạo xong project và cài đặt deps cần thiết thì chúng ta tạo file index.js với nội dung :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node.js&#34; data-lang=&#34;node.js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;x-forwarded-for&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remoteAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ip&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;server is listening on :8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Như bạn có thể thấy ứng dụng của chúng ta đơn thuần chỉ khởi tạo 1 web service bất cứ request nào tới đường dẫn / đều
sẽ trả về ip của client . Không có gì phức tạp cả vậy nên sau khi dùng lệnh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;node index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Và mở browser với địa chỉ localhost:8080 thì ta sẽ nhận được kết quả như sau :&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://cuongvn98.github.io/images/dockerize_node_app/run_node_app.png&#34;
        alt=&#34;run node app&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Nhưng ip trả về cũng có thể là 127.0.0.1 (ipv4) .&lt;/p&gt;
&lt;p&gt;Vậy tiếp theo chúng ta sẽ đến với phần chính. Dockerize nó.&lt;/p&gt;
&lt;h3 id=&#34;dockerize&#34;&gt;Dockerize&lt;/h3&gt;
&lt;p&gt;Để bắt đầu chúng ta sẽ tạo 1 file .dockerignore với nội dung như sau:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;node_modules&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nhằm mục đích rằng khi build docker image thì docker daemon sẽ bỏ qua thư mục node_modules thay vì copy nó vào như là build context.
Tiếp đó ta sẽ tạo file Dockerfile với nội dung như sau:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:15.6.0-alpine3.10&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /usr/app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; package-*.json .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; npm i&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 8080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mình sẽ giải thích từng dòng như sau :&lt;/p&gt;
&lt;p&gt;Đầu tiên khi khởi tạo 1 image nào thì chúng ta cũng chọn image cơ bản mà ứng dụng chúng ta build từ .
Chúng ta hoàn toàn có thể build từ image trống như là scratch. Nhưng trong nội dung bài này chúng ta sẽ dùng 1 image node.js được
build sẵn đó là node:15.6.0-alpine3.10&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:15.6.0-alpine3.10&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sau đó chúng ta sẽ chỉ định thư mục mà chúng ta sẽ làm việc với lệnh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /usr/app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trong image của chúng ta nó sẽ là nơi lưu trữ code. Sau đó chúng ta sẽ copy 2 file package.json và package-lock.json
vào và tiến hành cài dependencies .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; package-*.json .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; npm i&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sau khi cài xong thì ta sẽ bắt đầu copy toàn bộ dự án vào trong image với lệnh COPY&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nhưng đến đây chắc các bạn sẽ thắc mắc ủa sao không copy ngay toàn bộ dự án vào ngay từ đầu rồi install deps mà lại phải
copy 2 file package.json và package-lock.json vào trước làm chi . Lí do để giải thích cho việc này
là khi build docker daemon sẽ sử dụng cache để tối ưu thời gian build các layer không bị thay đổi giữa các lần build. Từ
đó giúp tối ưu thời gian build ứng dụng. Như trong service của chúng ta thì việc cập nhật deps xảy ra không thương xuyên thay vào đó là
source code .&lt;/p&gt;
&lt;p&gt;Và lệnh EXPOSE 8080 chỉ cho docker biết rằng ứng dụng của chúng ta sử dụng port 8080 .&lt;/p&gt;
&lt;p&gt;Lưu ý rằng lệnh này không hỗ trợ việc public port
nào . Chức năng của nó như là tài liệu của người build image cho người run image rằng port nào được dự định sử dụng .&lt;/p&gt;
&lt;p&gt;Và cuôí cùng là&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lệnh này được sử dụng như là chỉ ra lệnh nào sẽ được sử dụng để run  ứng dụng . Lưu ý mỗi image chỉ có duy nhất 1
lệnh CMD . Như trong ứng dụng của chúng ta dùng  CMD [&amp;ldquo;node&amp;rdquo;, &amp;ldquo;index&amp;rdquo;] để run vậy .&lt;/p&gt;
&lt;p&gt;Sau khi có được file Dockerfile chúng ta sẽ build image từ file này như sau :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t dockerize_node_app .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ở lần đầu run thì sẽ mất chút thời gian để pull image node.js về nhưng các lần sau sẽ nhanh hơn . Sau khi build thành công ta nhận được kết quả như sau :&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://cuongvn98.github.io/images/dockerize_node_app/build_image.png&#34;
        alt=&#34;build_image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Tiếp đó chúng ta thử tạo container từ image vưà tạo để xem chúng ta đã thành công hay chưa :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -p 8080:8080 dockerize_node_app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sau đó thử lại với trình duyệt ta nhận được kết quả sau :&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://cuongvn98.github.io/images/dockerize_node_app/run_node_app_from_image.png&#34;
        alt=&#34;build_image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Giải thích về lệnh trên như sau :
với docker run &amp;lt;image_name&amp;gt; ta sẽ tạo 1 container từ 1 image có sẵn và khởi chạy nó . Kèm theo đó vì service của chúng
ta lắng nghe ở port 8080 nên ta sẽ dùng -p 8080:8080 để bind port 8080 từ host tới port 8080 trong container được tạo .&lt;/p&gt;
&lt;h3 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h3&gt;
&lt;p&gt;Thế là chúng ta đã build và đóng gói thành công 1 node.js application vào docker image. Vẫn còn rất nhiều phần để giúp chúng
ta deploy hoàn chỉnh 1 ứng dụng. Nhưng mình mong bài viết này sẽ giúp các bạn tiến 1 bước trong việc học hỏi và sử dụng docker hơn .&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Giới thiệu về Docker</title>
      <link>https://cuongvn98.github.io/post/my-first-post/</link>
      <pubDate>Sat, 16 Jan 2021 23:06:59 +0700</pubDate>
      
      <guid>https://cuongvn98.github.io/post/my-first-post/</guid>
      <description>&lt;p&gt;Mình đã suy nghĩ xem nên khai bút bằng chủ đề gì . Nhưng thật là khó để chọn 1 chủ đề để nghiên cứu và viết.
Nên có lẽ mình sẽ bắt đầu bằng công cụ mà mình dùng hằng ngày và mình luôn ưu tiên cài đặt đầu tiên.&lt;/p&gt;
&lt;p&gt;Hồi mình bắt đầu tìm hiểu về docker (mid 2018) thì docker thời điểm đó ở Việt Nam vẫn chưa nổi lắm. Nhưng hiện tại thì có thể
dễ thấy nó đã trở thành xu thế trong ngành.&lt;/p&gt;
&lt;p&gt;Dạo một vòng 1 trang tìm việc IT lớn mình thấy hầu hết các công ty hiện tại đều ưu tiên đưa docker vào desired skill
như một ưu tiên hàng đầu cho ứng viên của mình.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://cuongvn98.github.io/images/my-first-post/job1.png&#34;
        alt=&#34;demonstrative image 1&#34;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://cuongvn98.github.io/images/my-first-post/job2.png&#34;
        alt=&#34;demonstrative image 2&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Vậy tóm lại docker là gì ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker là một ứng dụng giúp đơn giản hóa quá trình quản lý các tiến trình vào trong conntainer . Containers cho phép bạn
chạy ứng dụng trong một môi trường riêng biệt .
Nó như là 1 máy ảo nhưng:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Có tính di động cao&lt;/li&gt;
&lt;li&gt;Thân thiện với tài nguyên&lt;/li&gt;
&lt;li&gt;Phụ thuộc nhiều vào host OS hơn&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ngoài ra docker còn có những ưu điểm chính như sau :&lt;/p&gt;
&lt;h4 id=&#34;lightweight-resource-utilization&#34;&gt;Lightweight resource utilization:&lt;/h4&gt;
&lt;p&gt;Thay vì phải ảo hoá toàn bộ hệ điều hành , containers bị cô lập ở tầng process và xử dụng host kernel.&lt;/p&gt;
&lt;h4 id=&#34;portability&#34;&gt;Portability:&lt;/h4&gt;
&lt;p&gt;Toàn bộ dependencies được đóng goí trong container , cho phép nó chạy trên bất kì host nào&lt;/p&gt;
&lt;h4 id=&#34;predictability&#34;&gt;Predictability:&lt;/h4&gt;
&lt;p&gt;Host hoàn toàn không cần quan tâm về những gì đang chạy bên trong container và container cũng không quan tâm
về nó đang được chạy trên host nào .&lt;/p&gt;
&lt;p&gt;Không gì là hoàn hảo docker cũng vậy theo mình nó có vài nhược điểm như sau :&lt;/p&gt;
&lt;h4 id=&#34;platform-dependent&#34;&gt;Platform-dependent&lt;/h4&gt;
&lt;p&gt;Mặc dù được quảng cáo như hỗ trợ cả Windows, Mac OS X và cả Linux. Nhưng thật sự nó vẫn sử dụng máy ảo khi hoạt
động trên các nền tảng khác linux.&lt;/p&gt;
&lt;h4 id=&#34;persistent-data&#34;&gt;Persistent data&lt;/h4&gt;
&lt;p&gt;Mặc định toàn bộ data trong container sẽ bị xoá toàn bộ khi container bị xoá đi. Trừ khi bạn lưu nó vào đâu đó trước.
Cách đó là sử dụng Docker Data Volumes.&lt;/p&gt;
&lt;h3 id=&#34;cài-đặt&#34;&gt;Cài đặt&lt;/h3&gt;
&lt;p&gt;Phần cài đặt mình sẽ hướng dẫn các bạn cài đặt trên Ubuntu 20.04.&lt;/p&gt;
&lt;p&gt;Đầu tiên chúng ta mở terminal lên và bắt đầu cập nhập thông tin về các packages và upgrade hệ thống .
Bước này là tùy chọn nhưng mình vẫn đưa vào để đảm bảo hệ thống luôn up-to-date&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    sudo apt-get update
    sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tiếp theo là cài đặt dependencies&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    apt-transport-https &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    ca-certificates &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    curl &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    gnupg-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thêm GPG key và kiểm tra liệu key có hợp lệ:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  curl -fsSL https://download.docker.com/linux/ubuntu/gpg &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo apt-key add -
  sudo apt-key fingerprint 0EBFCD88
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tiếp đó là cài đặt repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; sudo add-apt-repository &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;s2&#34;&gt;&amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   stable&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Chúng ta cập nhật lại thông tin về repository vừa được thêm vào và bắt đầu cài đặt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; sudo apt-get update
 sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sau khi cài đặt thành công tiến hành kiểm tra docker đã hoạt động chưa bằng câu lệnh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  sudo docker run hello-world

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nếu có được kết quả như hình thì quá trình cài đặt đã thành công!&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://cuongvn98.github.io/images/my-first-post/docker-helloworld.png&#34;
        alt=&#34;hello-world&#34;/&gt;&lt;/p&gt;
&lt;h3 id=&#34;bonus&#34;&gt;Bonus&lt;/h3&gt;
&lt;p&gt;Rất bất tiện khi phải thêm sudo khi bắt đầu mỗi câu lệnh .Bạn có thể giải quyết bằng cách thêm user hiện tại vào docker group như sau:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; sudo usermod -aG docker &amp;lt;your-user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cuongvn98.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuongvn98.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cuongvn98.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuongvn98.github.io/about/</guid>
      <description>&lt;p&gt;Written in Go, Hugo is an open source static site generator available under the &lt;a href=&#34;https://github.com/gohugoio/hugo/blob/master/LICENSE&#34;target=&#34;_blank&#34;&gt;Apache Licence 2.0.&lt;/a&gt; Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.&lt;/p&gt;
&lt;p&gt;Hugo makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuin/goldmark&#34;&gt;https://github.com/yuin/goldmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muesli/smartcrop&#34;&gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.&lt;/p&gt;
&lt;p&gt;Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.&lt;/p&gt;
&lt;p&gt;Websites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.&lt;/p&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>